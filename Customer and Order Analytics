#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

#1. How many orders were placed in January? 

SELECT
COUNT(orderid) 
FROM BIT_DB.JanSales
;

#2. How many of those orders were for an iPhone? 

SELECT 
COUNT(orderID) 
FROM BIT_DB.JanSales
WHERE product LIKE'%iPhone%'
;

#3. Select the customer account numbers for all the orders that were placed in February.

SELECT 
customers.acctnum 
FROM customers
INNER JOIN FebSales
ON customers.order_id=FebSales.orderID
;

#4. Which product was the cheapest one sold in January, and what was the price? For this one, you are going to use the commands distinct and MIN(). Using 'SELECT distinct' will remove duplicate rows from your results. The MIN() command will allow you to select the smallest value from the price column. This is a hard one - see if you can do it, but don't be afraid to look at the hint or answer if you need to!

*** Option 1 ***
SELECT distinct 
JanSales.Product
,JanSales.price
FROM JanSales
WHERE JanSales.price IN (SELECT min(JanSales.price) FROM JanSales)
;

*** Option 2 ***
SELECT distinct 
MIN(JanSales.price)
,JanSales.Product
FROM JanSales
GROUP BY JanSales.Product,JanSales.price
ORDER BY JanSales.price ASC
LIMIT 1
;

#5. What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).

SELECT 
JanSales.Product
,ROUND(SUM(JanSales.Quantity)*price),2) AS 'Total Revenue'
FROM BIT_DB.JanSales
WHERE JanSales.Product <> "" AND JanSales.Product <> 'Product'
GROUP BY JanSales.Product
;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT
FebSales.location
,FebSales.Product
,SUM(FebSales.Quantity) AS 'Total Qty'
,FebSales.price AS 'Unit Price'
,SUM(FebSales.Quantity)*FebSales.price AS 'Total Rev'
FROM FebSales
WHERE FebSales.location LIKE '%548 Lincoln%'
GROUP BY FebSales.Product
;

#7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers? 

SELECT
COUNT(customers.acctnum) AS 'Customer oders >2'
,ROUND(AVG(FebSales.price),2) AS 'Avg Rev Spent'
FROM customers
JOIN FebSales
ON customers.order_id=FebSales.orderID
WHERE FebSales.Quantity > 2 AND customers.acctnum <> "" AND FebSales.Product <> 'Product'
;

#8. List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT 
product,
sum(quantity)
FROM FebSales
WHERE location like '%Angeles%'
GROUP BY product
;

#9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).

SELECT 
location
,quantity
/*,COUNT(orderID) AS 'Total Orders'*/
FROM JanSales
WHERE location LIKE '%NY%'
GROUP BY location 
HAVING quantity >= 3
;

#10. How many of each type of headphone were sold in February?

SELECT
Product
,SUM(Quantity) AS 'Total Qty'
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphone%'
GROUP BY Product
;

#11. What was the average amount spent per account in February? (Hints: For this question, we want the average amount spent / number of accounts, 
not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)

SELECT
ROUND((SUM(FebSales.Quantity*FebSales.price)/COUNT(customers.acctnum)),2) AS 'Avg Spent per Account'
FROM FebSales
LEFT JOIN customers
ON FebSales.orderID=customers.order_id
;

#12. What was the average quantity of products purchased per account in February? (Hint: just like question 3, we want the overall average, 
not the average for each account individually).

SELECT
SUM(FebSales.Quantity)/COUNT(customers.acctnum) AS 'Avg Qty Purchased'
FROM FebSales
LEFT JOIN customers
ON FebSales.orderID=customers.order_id
;

#13. Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT
JanSales.Product
,ROUND((SUM(JanSales.Quantity)*JanSales.price),2) AS 'Total Rev'
FROM JanSales
GROUP BY JanSales.Product
ORDER BY SUM(JanSales.Quantity)*JanSales.price desc
LIMIT 1
;


#14. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT
c.CustomerId
,c.FirstName
,c.LastName
,c.Country
FROM chinook.customers c
WHERE c.Country <> 'USA'
;

#15. Show only the Customers from Brazil.

SELECT
c.FirstName
,c.LastName
FROM chinook.customers c
WHERE c.Country = 'Brazil'
;

#16. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT
c.FirstName
,c.LastName
,i.InvoiceId
,i.InvoiceDate
,i.BillingCountry
FROM chinook.invoices i
LEFT JOIN chinook.customers c
ON i.CustomerId=c.CustomerId
WHERE i.BillingCountry = 'Brazil'
;

#17. Show the Employees who are Sales Agents.

SELECT
e.FirstName
,e.LastName
,e.Title
FROM chinook.employees e
WHERE e.Title LIKE '%agent%'
;

#18. Find a unique/distinct list of billing countries from the Invoice table.

SELECT distinct
BillingCountry
FROM chinook.invoices
;

#19. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT
i.*
,e.FirstName
,e.LastName
,e.Title
FROM chinook.customers c
LEFT JOIN chinook.invoices i
ON c.CustomerId=i.CustomerId
LEFT JOIN chinook.employees e
ON c.SupportRepId=e.EmployeeId
;

#20. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT
c.FirstName AS 'Customer First Name'
,c.LastName AS 'Customer Last Name'
,c.Country
,i.Total
,e.FirstName AS 'Agent Name'
FROM chinook.customers c
JOIN chinook.invoices i
ON c.CustomerId=i.CustomerId
JOIN chinook.employees e
ON c.SupportRepId=e.EmployeeId
;

#21. How many Invoices were there in 2009?

SELECT
COUNT(InvoiceId)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
;

#22. What are the total sales for 2009?

SELECT
ROUND(SUM(Total),2) AS 'Total Sales'
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
;

#23. Write a query that includes the purchased track name with each invoice line item.

SELECT
ii.InvoiceId
,t.Name
FROM chinook.invoice_items ii
LEFT JOIN chinook.tracks t
ON ii.TrackId=t.TrackId
;

#24. Write a query that includes the purchased track name AND artist name with each invoice line item.

SELECT
ii.InvoiceId
,t.Name AS 'Track'
,a.Name AS 'Artist Name'
FROM chinook.invoice_items ii
JOIN chinook.tracks t
ON ii.TrackId=t.TrackId
JOIN chinook.albums al
ON t.AlbumId=al.AlbumId
JOIN chinook.artists a
ON al.ArtistId=a.ArtistId
;

#25. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT
t.Name AS 'Track'
,a.Title AS 'Album'
,m.Name AS 'Media Type'
,g.Name AS 'Genre'
FROM chinook.tracks t
LEFT JOIN chinook.albums a
ON t.AlbumId=a.AlbumId
LEFT JOIN chinook.media_types m
ON t.MediaTypeId=m.MediaTypeId
LEFT JOIN chinook.genres g
ON t.GenreId=g.GenreId
;

#26. Show the total sales made by each sales agent.

SELECT
c.SupportRepId AS 'Employee ID'
,e.FirstName
,e.LastName
,ROUND(SUM(i.Total),2) AS 'Total Sales'
FROM chinook.customers c
LEFT JOIN chinook.employees e
ON c.SupportRepId=e.EmployeeId
LEFT JOIN chinook.invoices i
ON c.CustomerId=i.CustomerId
GROUP BY c.SupportRepId
;

#27. Which sales agent made the most in sales in 2009?

SELECT
c.SupportRepId AS 'Employee ID'
,i.InvoiceID
,i.InvoiceDate
,e.FirstName
,e.LastName
,e.Title
,ROUND(SUM(i.Total),2) AS 'Total_Sales'
FROM chinook.invoices i
LEFT JOIN chinook.customers c
ON c.CustomerId=i.CustomerId
LEFT JOIN chinook.employees e
ON c.SupportRepID=e.EmployeeId
WHERE i.InvoiceDate BETWEEN '2009-01-01%' AND '2009-12-31%' AND c.SupportRepId BETWEEN '3' AND '5'
GROUP BY c.SupportRepId
ORDER BY Total_Sales desc 
LIMIT 1
;
